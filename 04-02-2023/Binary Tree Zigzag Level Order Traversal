/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res=new ArrayList<>();
        if(root== null)
            return res;
        Stack<TreeNode> forward=new Stack<>();
        Stack<TreeNode> backward=new Stack<>();
            forward.push(root);
            while(!forward.isEmpty()||!backward.isEmpty())
            {
                    List<Integer>levelForward=new ArrayList<>();
                    while(!forward.isEmpty())
                    {
                     TreeNode temp=forward.pop();
                     levelForward.add(temp.val);
                     if(temp.left!=null) backward.push(temp.left);
                     if(temp.right!=null) backward.push(temp.right);   
                    }

                    res.add(levelForward);
                    if(forward.isEmpty()&&backward.isEmpty())
                     {break;}
                    List<Integer> levelReverse=new ArrayList<>();
                    while(!backward.isEmpty())
                    {
                        TreeNode temp=backward.pop();
                        levelReverse.add(temp.val);
                        if(temp.right!=null) forward.push(temp.right);
                        if(temp.left!=null) forward.push(temp.left);
                    }
                    res.add(levelReverse);
            }
            return res;
    }
}
