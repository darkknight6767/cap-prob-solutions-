/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class binaryTreeIterator{
    private Stack<TreeNode>stack=new Stack<>();
    public binaryTreeIterator(TreeNode root)
    {
        pushAll(root);
    }
    public void pushAll(TreeNode node)
    {
        while(node!=null)
        {
            stack.push(node);
            node=node.left;
        }
    }
    public int next()
    {
        TreeNode curr=stack.pop();
        pushAll(curr.right);
        return curr.val;
    }
    public boolean hasNext()
    {
        return !stack.isEmpty();
    }
}


class Solution {
    public int kthSmallest(TreeNode root, int k) {

        binaryTreeIterator obj=new binaryTreeIterator(root);
        int kth;
        for(int i=1;i<k;i++)
        {
            obj.next();
        }
        return obj.next();
    }
}
