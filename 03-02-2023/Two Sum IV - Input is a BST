/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 class BSTIrt{

    private Stack<TreeNode> stack = new Stack<>();
    boolean reverse=false;
    BSTIrt(TreeNode root,boolean rev){
        reverse = rev;
      
        pushAll(root);
    }
    boolean hasNext(){
        return (!stack.isEmpty());
    }
    public int next(){

        TreeNode curr = stack.pop();
        if(reverse==true) pushAll(curr.left);
        else pushAll(curr.right);
        return curr.val;
    }
    public void pushAll(TreeNode root){
        while(root != null){
            stack.push(root);
            if(reverse==true){
                
                root = root.right;
            }
            else{
                root = root.left;
            }
        }
    }
}
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        BSTIrt i = new BSTIrt(root,false);
        BSTIrt j = new BSTIrt(root,true);
        int forward = i.next(),back = j.next();
        while(back>forward){
            
            if(forward+back==k) return true;
            else if(forward+back>k) back = j.next();
            else forward=i.next();
        }
        return false;


        
}
}
