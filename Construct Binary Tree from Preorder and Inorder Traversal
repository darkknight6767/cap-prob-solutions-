/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap <Integer,Integer> map=new HashMap<>();
    int [] pre;
    int [] in;
    int track=0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        pre=preorder;
        in=inorder;
        int len=inorder.length;
        for(int i=0;i<inorder.length;i++)
        {
            map.put(inorder[i],i);
        }
         TreeNode root=btree(0,preorder.length-1);
            return root;
    }

    public TreeNode btree(int start,int end)
    {
         if(start>end)
            return null;
            int value=pre[track++];
        TreeNode curr=new TreeNode(value);
        int mid=map.get(value);

        curr.left=btree(start,mid-1);

        curr.right=btree(mid+1,end);

        return curr;
    }

}
