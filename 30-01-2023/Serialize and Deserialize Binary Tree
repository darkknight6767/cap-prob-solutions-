/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null)
            return "";
        StringBuilder st=new StringBuilder();
        Queue<TreeNode>queue=new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty())
        {
            TreeNode temp=queue.poll();
            if(temp==null)
                {
                    st.append("# ");
                    continue;
                }
            st.append(temp.val+" ");
           queue.add(temp.left);
           queue.add(temp.right);
        }
        return st.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.equals(""))
            return null;
        Queue<TreeNode>queue=new LinkedList<>();
        
        String [] nodes =data.split(" ");
        TreeNode root=new TreeNode(Integer.parseInt(nodes[0]));
        queue.add(root);
        int i=1;
        while(!queue.isEmpty()&&i<nodes.length)
        {
            TreeNode temp=queue.poll();
            if(!nodes[i].equals("#"))
            {
                TreeNode left=new TreeNode(Integer.parseInt(nodes[i]));
                temp.left=left;
                queue.add(left);
            }
            if(!nodes[++i].equals("#"))
            {
                TreeNode right=new TreeNode(Integer.parseInt(nodes[i]));
                temp.right=right;
                queue.add(right);
            }
            i++;
        }

        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
